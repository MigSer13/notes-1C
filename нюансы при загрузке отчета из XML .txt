Если отчет формировать в "Консоли компоновки данных", то в макет надо копировать след. образом:
1) открываем макет и вставляем строку
<?xml version="1.0" encoding="UTF-8"?>

2) после этого копируем текст файла XML из консоли компоновки.

3) меняем в начале файла и в конце буквы "d"  на "D":
<dataCompositionSchema xmlns="http://......	</dataCompositionSchema>   
на 
<DataCompositionSchema xmlns="http://.....	</DataCompositionSchema>




ТЕКСТ МОДУЛЯ:


Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)	
	АдресДанныхХранилища = "";
	
	СтандартнаяОбработка = Ложь; // отключаем стандартный вывод отчета - будем выводить программно 
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//РасшифровкаКД = Новый ДанныеРасшифровкиКомпоновкиДанных; // Создаем данные расшифровки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; // Создаем компоновщик макета 
	// Инициализируем макет компоновки используя схему компоновки данных 
	// и созданные ранее настройки и данные расшифровки
	
	//СхемаКомпоновкиДанных = ПолучитьМакет("СхемаКД");
	СхемаКомпоновкиДанных = ПолучитьНастройкиИз_xml();
            
    МассивКультурДляОтображенияПолейОтчетаПоЗерновым = ПолучитьСписокКультурДляОтображенияПолейПоЗерновым();    
    МассивКультурДляОтображенияПолейОтчетаПоСахСвекле = ПолучитьСписокКультурДляОтображенияПолейПоСахСвекле();
    
    СписокКультурПользователя = Новый СписокЗначений; 
    Для каждого элемПользНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл                
        Если ТипЗнч(элемПользНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") 
            И элемПользНастройки.Параметр = Новый ПараметрКомпоновкиДанных("СписокКультур") Тогда
            Если ТипЗнч(элемПользНастройки.Значение) = Тип("СправочникСсылка.АпкКультуры") Тогда                
                СписокКультурПользователя.Добавить(элемПользНастройки.Значение);                                
            Иначе
                СписокКультурПользователя = элемПользНастройки.Значение;                
            КонецЕсли;                      
        КонецЕсли;
        
        //Если ТипЗнч(элемПользНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") 
        //    И элемПользНастройки.Параметр = Новый ПараметрКомпоновкиДанных("ВидыУборочныхРабот") Тогда
        //    Если ТипЗнч(элемПользНастройки.Значение) = Тип("СправочникСсылка.ВидыРаботСотрудников") Тогда                  
        //        СхемаКомпоновкиДанных.Параметры.ВидыУборочныхРабот.Значение.Добавить(элемПользНастройки.Значение);                                                            
        //    ИначеЕсли ТипЗнч(элемПользНастройки.Значение) = Тип("СписокЗначений") Тогда                  
        //        Для каждого зн Из элемПользНастройки.Значение Цикл	
        //            СхемаКомпоновкиДанных.Параметры.ВидыУборочныхРабот.Значение.Добавить(зн);                                                                    
        //        КонецЦикла;
        //    КонецЕсли;                      
        //КонецЕсли;
     КонецЦикла;  
    
    ПоляОтчетаПоЗерновым = ИменаПолейОтчетаПоЗерновым();
    ОтображатьПоляПоЗерновым = Ложь;
    Для каждого культураДляОтображенияПолейОтчета Из МассивКультурДляОтображенияПолейОтчетаПоЗерновым Цикл	
        Для каждого выбраннаяКультураПользователя Из СписокКультурПользователя Цикл	
            Если выбраннаяКультураПользователя.Значение = культураДляОтображенияПолейОтчета.Значение Тогда	
                ОтображатьПоляПоЗерновым = Истина;
                Прервать;
            КонецЕсли;  
        КонецЦикла;                
    КонецЦикла;  
    
    ПоляОтчетаПоСахСвекле = ИменаПолейОтчетаПоСахСвекле();
    ОтображатьПоляПоСахСвекле = Ложь;
    Для каждого культураДляОтображенияПолейОтчета Из МассивКультурДляОтображенияПолейОтчетаПоСахСвекле Цикл	
        Для каждого выбраннаяКультураПользователя Из СписокКультурПользователя Цикл	
            Если выбраннаяКультураПользователя.Значение = культураДляОтображенияПолейОтчета.Значение Тогда	
                ОтображатьПоляПоСахСвекле = Истина;
                Прервать;
            КонецЕсли;  
        КонецЦикла;                
    КонецЦикла;
    
  
    //добавляем поля по показателям (не у всех пользователей появлялись)
    КолЭлементов = Настройки.Выбор.Элементы.Количество()-1;
    Для каждого полеОтчета Из ПоляОтчетаПоЗерновым Цикл	
        i = 0;
        естьЗначение = Ложь;
        Пока i <= КолЭлементов Цикл
            Если Настройки.Выбор.Элементы[i].Поле = Новый ПолеКомпоновкиДанных(полеОтчета) Тогда	
                естьЗначение = Истина;                        
            КонецЕсли;             
            
            Если i = КолЭлементов И НЕ естьЗначение Тогда	
                НовоеПолеКД = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));                          
                НовоеПолеКД.Использование = Истина;
                НовоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(полеОтчета);
            КонецЕсли;      	
            i = i +1;
        КонецЦикла;
    КонецЦикла;  
    
    
    //устанавливаем видимость полей отчета в зависимости от выбранных культур пользователем
    Если ОтображатьПоляПоЗерновым ИЛИ ОтображатьПоляПоСахСвекле Тогда	        
        Для каждого элем Из Настройки.Выбор.Элементы Цикл	
            Если ТипЗнч(элем) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда	
                Для каждого имяПолОтчета Из ПоляОтчетаПоЗерновым Цикл	
                    Если элем.Поле = Новый ПолеКомпоновкиДанных(имяПолОтчета) Тогда
                        Если ОтображатьПоляПоЗерновым Тогда	
                            элем.Использование = Истина;
                        Иначе
                            элем.Использование = Ложь;
                        КонецЕсли;  
                    КонецЕсли;  
                КонецЦикла;  
                
                Для каждого имяПолОтчета Из ПоляОтчетаПоСахСвекле Цикл	
                    Если элем.Поле = Новый ПолеКомпоновкиДанных(имяПолОтчета) Тогда	
                        Если ОтображатьПоляПоСахСвекле Тогда	
                            элем.Использование = Истина;
                        Иначе
                            элем.Использование = Ложь;
                        КонецЕсли;
                    КонецЕсли;  
                КонецЦикла;
            КонецЕсли;  
        КонецЦикла;  
    КонецЕсли;      
    
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки );
    
    //КомпоновщикНастроек.ПользовательскиеНастройки.Элементы !!!
	
	// Скомпонуем результат
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровки );
	
	ДокументРезультат.Очистить();
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	///////////////////////////////////////////////////////////////////////////////////////////////////	
	ПроцессорВывода.НачатьВывод();
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	Пока НЕ ЭлементРезультата = Неопределено Цикл
				
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();	
	КонецЦикла; 

	ПроцессорВывода.ЗакончитьВывод();
	///////////////////////////////////////////////////////////////////////////////////////////////////	
	//ПроцессорВывода.Вывести(ПроцессорКомпоновки);	
	
	
	 // Устанавливаем фиксацию в табличном документе	 
	ДокументРезультат.ФиксацияСлева = 2;
	//ДокументРезультат.Защита = Ложь;
	
	//Для i=1 ПО ДокументРезультат.ВысотаСтраницы Цикл	
	//	Если СтрНайти(ДокументРезультат.Область("R"+i+"C1").Текст, "Путевой") <> 0 Тогда	
	//		ДокументРезультат.Область("R"+i+"C1").Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
	//		
	//	КонецЕсли;  
	//КонецЦикла;  
		
КонецПроцедуры

Функция ПолучитьНастройкиИз_xml()
    Чтение = Новый ЧтениеXML;
    НовыйСXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
    СхемаОтчета_xml = ПолучитьМакет("СхемаОтчета_xml");
    Чтение.УстановитьСтроку(СхемаОтчета_xml.ПолучитьТекст());
	
	Возврат НовыйСXDTO.ПрочитатьXML(Чтение);
КонецФункции



Функция ПолучитьСписокКультурДляОтображенияПолейПоЗерновым()    
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
    |	АпкКультуры.Ссылка КАК Ссылка
    |ИЗ
    |	Справочник.АпкКультуры КАК АпкКультуры
    |ГДЕ
    |	АпкКультуры.Наименование = ""Озимая пшеница""
    |	ИЛИ АпкКультуры.Наименование = ""Яровая пшеница""
    |	ИЛИ АпкКультуры.Наименование ПОДОБНО ""%рожь%""
    |	ИЛИ АпкКультуры.Наименование ПОДОБНО ""%рапс%""
    |	ИЛИ АпкКультуры.Наименование ПОДОБНО ""%соя%""
    |	ИЛИ АпкКультуры.Наименование ПОДОБНО ""%тритикале%""
    |	ИЛИ АпкКультуры.Наименование = ""Ячмень""
    |	";	    
    Выборка = Запрос.Выполнить().Выбрать();
    
    СписокКультур = Новый СписокЗначений;
    Пока Выборка.Следующий() Цикл
        СписокКультур.Добавить(Выборка.Ссылка);		
    КонецЦикла;                                	

    Возврат СписокКультур;
КонецФункции 

Функция ПолучитьСписокКультурДляОтображенияПолейПоСахСвекле()    
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
    |	АпкКультуры.Ссылка КАК Ссылка
    |ИЗ
    |	Справочник.АпкКультуры КАК АпкКультуры
    |ГДЕ
    |	АпкКультуры.Наименование = ""Сахарная свекла""
    |	";	    
    Выборка = Запрос.Выполнить().Выбрать();
    
    СписокКультур = Новый СписокЗначений;
    Пока Выборка.Следующий() Цикл
        СписокКультур.Добавить(Выборка.Ссылка);		
    КонецЦикла;                                	

    Возврат СписокКультур;
КонецФункции 

Функция ИменаПолейОтчетаПоЗерновым()
    ИменаПолейОтчетаПоЗерновым = Новый Массив;
    ИменаПолейОтчетаПоЗерновым.Добавить("Влажность");
    ИменаПолейОтчетаПоЗерновым.Добавить("Клейковина");
    ИменаПолейОтчетаПоЗерновым.Добавить("Протеин");
    
    Возврат ИменаПолейОтчетаПоЗерновым;
КонецФункции // ()

Функция ИменаПолейОтчетаПоСахСвекле()
    ИменаПолейОтчетаПоСахСвекле = Новый Массив;
    ИменаПолейОтчетаПоСахСвекле.Добавить("ДигестияПроцентЗаСутки");
    ИменаПолейОтчетаПоСахСвекле.Добавить("ДигестияПроцентСреднееЗаПериод");
    ИменаПолейОтчетаПоСахСвекле.Добавить("ЗагрязненностьПроцентЗаСутки");
    ИменаПолейОтчетаПоСахСвекле.Добавить("ЗагрязненностьПроцентЗаПериод");
    
    Возврат ИменаПолейОтчетаПоСахСвекле;
КонецФункции // ()
 
