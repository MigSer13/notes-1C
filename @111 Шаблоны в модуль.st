{1,
{43,
{"Шаблоны",1,0,"",""},
{0,
{"//",0,0,"разд","///////////////////////////////////////////////////////////////////////////////"}
},
{0,
{"НаКлиентеПроцедура",0,0,"нкп","&НаКлиенте 
Процедура <?>()

	
КонецПроцедуры"}
},
{0,
{"НаКлиентеФункция",0,0,"нкф","&НаКлиенте
Функция <?>()
	
	Возврат ;
КонецФункции"}
},
{0,
{"НаСервереПроцедура",0,0,"нсп","&НаСервере 
Процедура <?>()

	
КонецПроцедуры"}
},
{0,
{"НаСервереФункция",0,0,"нсф","&НаСервере
Функция <?>()

	Возврат ;
КонецФункции"}
},
{0,
{"НаСервереБезКонтекстаПроцедура",0,0,"нсбкп","&НаСервереБезКонтекста
Процедура <?>()

	
КонецПроцедуры"}
},
{0,
{"НаСервереБезКонтекстаФункция",0,0,"нсбкф","&НаСервереБезКонтекста
Функция <?>()
	
	Возврат ;
КонецФункции"}
},
{0,
{"Цикл Для каждого",0,0,"цдк","Для каждого <?> Из  Цикл	

КонецЦикла; "}
},
{0,
{"Если",0,0,"е","Если <?> Тогда	

КонецЕсли; "}
},
{0,
{"//-",0,0,"//-","//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//"}
},
{0,
{"Комментарий",0,0,"//++","//++ цка_Сергей (<?""ТекущаяДата"">) заявка <?""Номер заявки"">

//-- цка_Сергей (<?""ТекущаяДата"">) заявка <?""Номер заявки"">"}
},
{0,
{"ПустаяДата",0,0,"00","'00010101'"}
},
{0,
{"ЗапросКДокументу",0,0,"зд","Запрос = Новый Запрос;
Запрос.Текст = ""<?"""", Документ>"";	
//Запрос.УстановитьПараметр("""", );
Выборка = Запрос.Выполнить().Выбрать();	
Пока Выборка.Следующий() Цикл
		
КонецЦикла;"}
},
{0,
{"ЗапросКСправочнику",0,0,"зс","Запрос = Новый Запрос;
Запрос.Текст = ""<?"""", Справочник>"";	
//Запрос.УстановитьПараметр("""", );
Выборка = Запрос.Выполнить().Выбрать();	
Пока Выборка.Следующий() Цикл
		
КонецЦикла;"}
},
{0,
{"Запрос",0,0,"з","Запрос = Новый Запрос;
Запрос.Текст = ""<?>"";	
//Запрос.УстановитьПараметр("""", );
Выборка = Запрос.Выполнить().Выбрать();	
Пока Выборка.Следующий() Цикл
		
КонецЦикла;"}
},
{0,
{"ВопросПользователю",0,0,"ответ","Ответ = Вопрос(""<?>"", РежимДиалогаВопрос.ДаНет);
Если Ответ = КодВозвратаДиалога.Нет Тогда	
			
КонецЕсли; "}
},
{0,
{"Пометка в ХранилищеКонфигурации",0,0,"пх","объект <?> готов к регламентному обновлению"}
},
{0,
{"ЗначениеЗаполнено",0,0,"зз","ЗначениеЗаполнено(<?>)"}
},
{0,
{"СтрЗаменитьЗапрос",0,0,"зам","Запрос.Текст = СтрЗаменить(Запрос.Текст, ""."" , ""И ИСТИНА"");"}
},
{0,
{"НаборЗаписейНакопления",0,0,"НЗ","НЗ = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
НЗ.Отбор.Регистратор.Установить(Ссылка);
НЗ.Прочитать();
"}
},
{0,
{"ЭлементФормыПоле",0,0,"эфп","ГруппаСубконто =  Элементы.Добавить(""ГруппаСубконто"", тип(""ГруппаФормы""), ГруппаДанныеКонтрагента); 
ГруппаСубконто.Вид = ВидГруппыФормы.ОбычнаяГруппа;
ГруппаСубконто.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;    
ГруппаСубконто.ОтображатьЗаголовок = Ложь;

ПолеКонтрагент = Элементы.Добавить(""цка_Контрагент"", Тип(""ПолеФормы""), ГруппаСубконто); 
ПолеКонтрагент.Вид = ВидПоляФормы.ПолеВвода;
ПолеКонтрагент.ПутьКДанным = ""Объект.цка_Контрагент"";
ПолеКонтрагент.Заголовок = ""Контрагент"";"}
},
{0,
{"ЭлементФормыКоманда",0,0,"эфк"," КомандаВнестиОперативку = Команды.Добавить(""цка_ПоказатьОтчетПоОстаткамМатериалов"");
 КомандаВнестиОперативку.Действие = ""цка_ПоказатьОтчетПоОстаткамМатериалов"";
     КнопкаВнестиОперативку = Элементы.Добавить(""КнопкаПоказатьОтчетПоОстаткамМатериалов"", Тип(""КнопкаФормы""), Элементы.МатериалыИРаботы.КоманднаяПанель);
     КнопкаВнестиОперативку.Заголовок = ""Показать остатки материалов на складах"";
     КнопкаВнестиОперативку.ИмяКоманды = ""цка_ПоказатьОтчетПоОстаткамМатериалов"";"}
},
{0,
{"ЭлементФормыПолеФлажка",0,0,"эфф","ФлагИспользоватьДопОборудование = Элементы.Добавить(""цка_ИспользоватьДопОборудование"", Тип(""ПолеФормы""), Элементы.ГруппаДополнительно);	
ФлагИспользоватьДопОборудование.Вид = ВидПоляФормы.ПолеФлажка;
ФлагИспользоватьДопОборудование.Заголовок = ""Использовать доп. оборудование"";
ФлагИспользоватьДопОборудование.ПутьКДанным = ""Объект.цка_ИспользоватьДопОборудование"";
ФлагИспользоватьДопОборудование.УстановитьДействие(""ПриИзменении"", ""цка_ИспользоватьДопОборудованиеПриИзменении"");"}
},
{0,
{"ТипЗнч=Тип",0,0,"тип","ТипЗнч(<?>) = Тип() 
	

 "}
},
{0,
{"#Вставка",0,0,"вс","#Вставка
    <?>    
#КонецВставки"}
},
{0,
{"#Удаление",0,0,"уд","#Удаление
    <?>    
#КонецУдаления"}
},
{0,
{"ЕслиЗначениеЗаполнено",0,0,"езз","Если ЗначениеЗаполнено(<?>) Тогда	

КонецЕсли;"}
},
{0,
{"ПопыткаИсключение",0,0,"поп","Попытка
     <?>
Исключение

КонецПопытки; "}
},
{0,
{"ДОДЕЛАТЬ",0,0,"!","// TODO (ДОДЕЛАТЬ)- <?>"}
},
{0,
{"|",0,0,"ё","|"}
},
{0,
{"Следующий()",0,0,"сл","Следующий() "}
},
{0,
{"Цикл Пока",0,0,"пок","Пока <?> Цикл
    
КонецЦикла;    "}
},
{0,
{"TODO ПЕРЕНЕСТИ",0,0,"!!","// TODO ПЕРЕНЕСТИ В ОСНОВНУЮ КОНФИГУРАЦИЮ"}
},
{0,
{"ЕслиИначе",0,0,"ес","Если <?> 
Тогда
    
Иначе

КонецЕсли;"}
},
{0,
{"ЕСТЬNULL",0,0,"ен","ЕСТЬNULL("}
},
{0,
{"ДопРеквизитИЭлементФормы",0,0,"допр","ДобавляемыеРеквизиты = Новый Массив;    
РеквизитТехКартаДополнительная = Новый РеквизитФормы(""ТехКартаДополнительная"", новый ОписаниеТипов(""ДокументСсылка.АпкТехнологическиеКартыНаПоле""), """", """", Ложь);    

ДобавляемыеРеквизиты.Добавить(РеквизитТехКартаДополнительная);   
ИзменитьРеквизиты(ДобавляемыеРеквизиты);        

ПолеТехКарта = Элементы.Вставить(""цкаТехКартаДополнительная"", Тип(""ПолеФормы""), Элементы.ГруппаСодержание, Элементы.Описание);
ПолеТехКарта.Вид = ВидПоляФормы.ПолеНадписи;
ПолеТехКарта.ПутьКДанным = ""ТехКартаДополнительная""; 
ПолеТехКарта.Заголовок = ""Тех. карта (дополнительная)"";
ПолеТехКарта.Гиперссылка = Истина;
"}
},
{0,
{"НаСервереБезКонтекста",0,0,"нсбк","&НаСервереБезКонтекста"}
},
{0,
{"&НаСервере",0,0,"нс","&НаСервере"}
},
{0,
{"НаКлиенте",0,0,"нк","&НаКлиенте"}
},
{0,
{"[ ]",0,0,"ъ","[<?>]"}
},
{0,
{"ПараметрыМетода",0,0,"пм","// <?>возвращает пересчитанное количество в/из единицы хранения
//
// Параметры:
//  Номенклатура    - Ссылка - справочник Номенклатуры
//  ТекЕдИзм        - Ссылка - справочник УпаковкиЕдиницыИзмерения
//  ТекКоличество   - Число                           
//  ВидПересчета - Строка - ""в единицу хранения"" ИЛИ ""из единицы хранения"""}
},
{0,
{"ПодключениеВнешнейОбрМодульОбъекта",0,0,"внеш","Функция СведенияОВнешнейОбработке() Экспорт
 
 ПараметрыРегистрации = Новый Структура;
 МассивНазначений = Новый Массив;
 
//	МассивНазначений.Добавить(""подсистема.CRMИМАРКЕТИНГ""); //Указываем документ к которому делаем внешнюю печ. форму
 ПараметрыРегистрации.Вставить(""Вид"", ""ДополнительныйОтчет""); //может быть - ПечатнаяФорма, ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
//	ПараметрыРегистрации.Вставить(""Назначение"",		МассивНазначений);
 ПараметрыРегистрации.Вставить(""Наименование"", ""Отчет по заправкам расходу топлива и сверка с Wialon(цка)""); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
 ПараметрыРегистрации.Вставить(""БезопасныйРежим"", ИСТИНА);
 ПараметрыРегистрации.Вставить(""Информация"", ""Отчет по заправкам расходу топлива и сверка с Wialon (цка)"");
 ПараметрыРегистрации.Вставить(""Версия"", ""1.0"");    
 
 ТаблицаКоманд = ПолучитьТаблицуКоманд();
 ДобавитьКоманду(ТаблицаКоманд, ""Отчет по заправкам и расходу топлива и сверка с Wialon (цка)"", ""ОтчетПоЗаправкамРасходу_СверкаСWialon"", ""ОткрытиеФормы"");
 ПараметрыРегистрации.Вставить(""Команды"", ТаблицаКоманд);
 
 Возврат ПараметрыРегистрации;
 
КонецФункции
 
Функция ПолучитьТаблицуКоманд()
 Команды = Новый ТаблицаЗначений;
 Команды.Колонки.Добавить(""Представление"", Новый ОписаниеТипов(""Строка""));//как будет выглядеть описание печ.формы для пользователя
 Команды.Колонки.Добавить(""Идентификатор"", Новый ОписаниеТипов(""Строка"")); //имя макета печ.формы
 Команды.Колонки.Добавить(""Использование"", Новый ОписаниеТипов(""Строка"")); //ВызовСерверногоМетода
 Команды.Колонки.Добавить(""ПоказыватьОповещение"", Новый ОписаниеТипов(""Булево""));
 Команды.Колонки.Добавить(""Модификатор"", Новый ОписаниеТипов(""Строка""));
 
 Возврат Команды;
КонецФункции
 
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = """")
 
 НоваяКоманда = ТаблицаКоманд.Добавить();
 НоваяКоманда.Представление = Представление;  
 НоваяКоманда.Идентификатор = Идентификатор;
 НоваяКоманда.Использование = Использование;
 НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
 НоваяКоманда.Модификатор = Модификатор;
 
КонецПроцедуры
"}
},
{0,
{"&",0,0,"ёё","&<?>"}
}
}
}